<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.关系数据结构</title>
    <url>/2022/06/29/1.%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>&emsp;</p>
<span id="more"></span>
<h1 id="一、关系的数学定义"><a href="#一、关系的数学定义" class="headerlink" title="一、关系的数学定义"></a>一、关系的数学定义</h1><p>现实世界中存在的可以相互区分的事物或概念称为实体（Entity）。在关系模型中，无论是实体集，还是实体集之间的联系均有单一的关系表示。由于关系模型是建立在集合代数基础上的，因而一般从集合论角度对关系数据结构进行定义。</p>
<p><strong>1. 域（Domain）的定义</strong></p>
<p>域（Domain）是一组具有相同数据类型的值的集合。</p>
<p>例如，整数、正数、负数、｛0、1｝等，都可以作为域。</p>
<p><strong>2. 笛卡尔积（Cartesian Product）的定义</strong></p>
<p>给定一组域 $D_1, D_2, \cdots, D_n$，这些域中可以有相同的部分，则 $D_1, D_2, \cdots, D_n$  的笛卡尔积（Cartesian Product）为</p>
<script type="math/tex; mode=display">
D_1\times D_2\times \cdots \times D_n=\{ (d_1,d_2,\cdots,d_n)|d_i\in D_i, i=1, 2, \cdots, n \}</script><p>式中，每一个元素 $(d_1, d_2, \cdots, d_n)$ 为一个 𝘯 元组（n-Tuple），简称元组（Tuple）。元素中的每一个值 $d_i$ 称作一个分量（Component）。</p>
<p><strong>3. 关系（Relation）的定义</strong></p>
<p>$D_1\times D_2\times \cdots \times D_n$ 的子集称为在域 $D_1, D_2, \cdots, D_n$ 上的关系（Relation），表示为</p>
<script type="math/tex; mode=display">
R(D_1, D_2, \cdots, D_n)</script><p>式中，𝘙 表示关系的名字，𝘯 是关系的目或度（Degree）。当 𝘯 = 1 时，称该关系为单元关系（Unary Relation）；当 𝘯 = 2 时，称该关系为二元关系（Binary Relation）。</p>
<p><strong>4. 关系模式（Relation Schema）的定义</strong></p>
<p>关系的描述称为关系模式（Relation Schema），关系模式可以形式化地表示为</p>
<script type="math/tex; mode=display">
R<U,D,Dom,F></script><p>式中，𝘙 为关系名，𝘜 为关系的属性集合，𝘋 为属性集合 𝘜 中属性的数据域，𝘋𝘰𝘮 为属性到域的映射的集合，𝘍 为属性间数据的依赖关系集合。</p>
<h1 id="二、关系中的基本名词"><a href="#二、关系中的基本名词" class="headerlink" title="二、关系中的基本名词"></a>二、关系中的基本名词</h1><p><strong>1. 元组</strong></p>
<p>关系表中的每一横行称作一个元组（Tuple），组成元组的元素为分量。数据库中的一个实体或实体间的一个联系均使用一个元组表示。</p>
<p><strong>2. 属性</strong></p>
<p>关系中的每一列称为一个属性（Attribute）。属性具有型和值两层含义：属性的型指属性名和属性取值域；属性值指属性具体的取值。由于关系中的属性名具有标识列的作用，因而同一关系中的属性名不能相同。关系中往往有多个属性，属性用于表示实体的特征。</p>
<p><strong>3. 候选码和主码</strong></p>
<p>若关系中的某一属性值（或单个属性）的值能唯一地标识一个元组，则称该属性组（或属性）为候选码（Candidata Key）。为数据管理方便，当一个关系有多个候选码时，应选定其中的一个候选码为主码（Primary Key）。当然，如果关系中只有一个候选码，这个唯一的候选码就是主码。</p>
<p><strong>4. 全码</strong></p>
<p>若关系的候选码中只包含一个属性，则称它为单属性码；若候选码是由多个属性构成的，则称它为多属性码。若关系中只有一个候选码，且这个候选码中包括全部属性，则这种候选码为全码（All-Key）。全码是候选码的特例，它说明该关系中不存在属性之间相互决定的情况。</p>
<p><strong>5. 主属性和非主属性</strong></p>
<p>关系中，候选码中的属性称为主属性（Prime Attribute），不包含在任何候选码中的属性称为非主属性（Non-Key Attribute）。</p>
]]></content>
      <categories>
        <category>关系模式</category>
      </categories>
  </entry>
  <entry>
    <title>2.数据依赖</title>
    <url>/2022/06/29/2.%E6%95%B0%E6%8D%AE%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<p>&emsp;</p>
<span id="more"></span>
<h1 id="一、函数依赖（Functional-Dependency）"><a href="#一、函数依赖（Functional-Dependency）" class="headerlink" title="一、函数依赖（Functional Dependency）"></a>一、函数依赖（Functional Dependency）</h1><p><strong>（1）函数依赖</strong></p>
<p>设 𝘙&lt;𝘜&gt; 是属性集合 𝘜 上的关系模式，𝘟、𝘠 是 𝘜 的子集。若对于 𝘙&lt;𝘜&gt; 的任意一个可能的关系 𝘳，𝘳 中不存在两个元组在 𝘟 上的属性值相等，而 𝘠 上的属性值不等，则称 𝘟 函数确定 𝘠 函数，或 𝘠 函数依赖于 𝘟 函数，记作 𝘟 $\to$ 𝘠，其中，𝘟 叫做决定因素（Determinant），𝘠 叫做依赖因素（Dependent）。若 𝘠 不函数依赖于 𝘟，则记作 𝘟 $\nrightarrow$ 𝘠。若 𝘟 $\to$ 𝘠，𝘠 $\to$ 𝘟，则记作 𝘟 $\leftrightarrow$ 𝘠。</p>
<p>函数依赖具有自反律：若 𝘟 $\to$ 𝘠 在 𝘙&lt;𝘜&gt; 上成立，则对任何 𝘠’ $\subset$ 𝘠，有 𝘟 $\to$ 𝘠’ 成立。</p>
<p>例如，对于教学关系模式：教学 &lt;𝘜，𝘍&gt;</p>
<p>𝘜＝｛学号，姓名，年龄，性别，系名，系主任，课程名，成绩｝</p>
<p>𝘍＝｛学号 $\to$ 姓名，学号 $\to$ 年龄，学号 $\to$ 性别，学号 $\to$ 系名，系名 $\to$ 系主任，（学号，课程名） $\to$ 成绩｝</p>
<p><strong>（2）平凡函数依赖</strong></p>
<p>𝘟 $\to$ 𝘠，但 𝘠 $\nsubseteq$ 𝘟，则称 𝘟 $\to$ 𝘠 是非平凡函数依赖。若不特别声明，总是讨论非平凡函数依赖。</p>
<p>𝘟 $\to$ 𝘠，但 𝘠 $\subseteq$ 𝘟，则称 𝘟 $\to$ 𝘠 是平凡函数依赖。</p>
<p><strong>（3）完全函数依赖</strong></p>
<p>在 𝘙&lt;𝘜&gt; 中，如果 𝘟 $\to$ 𝘠，并且对于 𝘟 的任何一个真子集 𝘟’，都有 𝘟’ $\nrightarrow$ 𝘠，则称 𝘠 对 𝘟 完全函数依赖，记作 𝘟 $\stackrel{F}{\longrightarrow}$ 𝘠。如果 𝘟 $\to$ 𝘠，但 𝘠 不完全函数依赖于 𝘟，则称 𝘠 对 𝘟 部分函数依赖，记作 𝘟 $\stackrel{P}{\longrightarrow}$ 𝘠。</p>
<p>例如，在教学关系模式中，学号和课程名为主码，而（学号，课程名）$\stackrel{F}{\longrightarrow}$ 成绩，（学号，课程名）$\stackrel{P}{\longrightarrow}$ 姓名。</p>
<p><strong>（4）传递函数依赖</strong></p>
<p>在 𝘙&lt;𝘜&gt; 中，如果 𝘟 $\to$ 𝘠，（𝘠 $\nsubseteq$ 𝘟），𝘠 $\nrightarrow$ 𝘟，𝘠 $\to$ 𝘡，则称 𝘡 对 𝘟 传递函数依赖，记作 𝘟 $\stackrel{传递}{\longrightarrow}$ 𝘡。</p>
<p>例如，在教学关系模式中，因为存在：学号 $\to$ 系名，系名 $\to$ 系主任，所以也存在：学号 $\to$ 系主任。</p>
<h1 id="二、多值依赖（Multivalued-Dependency）"><a href="#二、多值依赖（Multivalued-Dependency）" class="headerlink" title="二、多值依赖（Multivalued Dependency）"></a>二、多值依赖（Multivalued Dependency）</h1><p><strong>（1）多值依赖</strong></p>
<p>设 𝘙&lt;𝘜&gt; 是属性集 𝘜 上的一个关系模式，𝘟、𝘠、𝘡 是 𝘜 的子集，并且 𝘡＝𝘜 $-$ 𝘟 $-$ 𝘠。关系模式 𝘙&lt;𝘜&gt; 中多值依赖 𝘟 $\to\to$ 𝘠 成立，当且仅当对 𝘙&lt;𝘜&gt; 的任一关系 𝘳，给定的一对（𝘹，𝘻）值，有一组 𝘠 的值与之对应，这组值仅仅决定于 𝘹 值而与 𝘻 值无关。</p>
<p>对于多值依赖的另一个等价的形式化定义是：在 𝘙&lt;𝘜&gt; 的任一关系 𝘳 中，如果存在元组 𝘵、𝘴 使得 𝘵[𝘟]＝𝘴[𝘟]，那么就必然存在元组 𝘸、𝘷 $\in$ 𝘳（𝘸、𝘷 可以与 𝘴、𝘵 相同），使得 𝘸[𝘟]＝𝘷[𝘟]＝𝘵[𝘟]，而 𝘸[𝘠]＝𝘵[𝘠]，𝘸[𝘡]＝𝘴[𝘡]，𝘷[𝘠]＝𝘴[𝘠]，𝘷[𝘡]＝𝘵[𝘡]（即<strong>交换 𝘴、𝘵 元组的 𝘠 值所得的两个新元组必在关系 𝘳 中</strong>），则 𝘠 多值依赖于 𝘟，记为 𝘟 $\to\to$ 𝘠。这里，𝘟、𝘠 是 𝘜 的子集，𝘡＝𝘜 $-$ 𝘟 $-$ 𝘠。</p>
<p>多值依赖具有对称性，即：若 𝘟 $\to\to$ 𝘠，则 𝘟 $\to\to$ 𝘡，其中 𝘡＝𝘜 $-$ 𝘟 $-$ 𝘠。</p>
<p>函数依赖是多值依赖的特殊情况，即：若  𝘟 $\to$ 𝘠，则  𝘟 $\to\to$ 𝘠。这是因为当 𝘟 $\to$ 𝘠 时，对 𝘟 的每一个值 𝘹，𝘠 都有一个确定的值 𝘺 与之对应，所以 𝘟 $\to\to$ 𝘠。</p>
<p>多值依赖的有效性与属性集的范围有关。在关系模式 𝘙 中，函数依赖 𝘟 $\to$ 𝘠 的有效性仅仅决定于 𝘟、𝘠 这两个属性集；在多值依赖中，𝘟 $\to\to$ 𝘠 在 𝘜 上是否成立，不仅要检查 𝘟、𝘠 上的值，而且要检查 𝘡＝𝘜 $-$ 𝘟 $-$ 𝘠 上的值。因此，如果 𝘟 $\to\to$ 𝘠 在 𝘞（𝘞 $\subset$ 𝘜）上成立，则在 𝘜 上则不一定成立。除此之外，对多值依赖  𝘟 $\to\to$ 𝘠，若在 𝘙 上成立，也并不能断言对于任何 𝘠’ $\subset$ 𝘠，有  𝘟 $\to\to$ 𝘠’ 成立。</p>
<p><strong>（2）平凡的多值依赖</strong></p>
<p>若 𝘟 $\to\to$ 𝘠，而 𝘡＝$\varnothing$ ，即 𝘡 为空集，则称 𝘟 $\to\to$ 𝘠 为平凡的多值依赖。即对于 𝘙&lt;𝘟，𝘠&gt;，如果有 𝘟 $\to\to$ 𝘠 成立，则 𝘟 $\to\to$ 𝘠 为平凡的多值依赖。</p>
<h1 id="三、连接依赖（Join-Dependency）"><a href="#三、连接依赖（Join-Dependency）" class="headerlink" title="三、连接依赖（Join Dependency）"></a>三、连接依赖（Join Dependency）</h1><p>设 𝘙&lt;𝘜&gt; 是属性集 𝘜 上的关系模式，$x_1,x_2,\cdots,x_n$ 是 𝘜 的子集，并且 $\bigcup\limits^n_{i=1}x_i=U$，如果 $R=\Join \mathop{R}\limits^n_{i=1}[x_i]$ 对 𝘙 的一切关系均成立，则称 𝘙 在 $x_1,x_2,\cdots,x_n$ 上具有 𝘯 目连接依赖，记作：$\Join [x_1][x_2]\cdots[x_n]$。</p>
<p>连接依赖不能直接从语义中推出，只能从连接运算中反映出来。</p>
]]></content>
      <categories>
        <category>关系模式</category>
      </categories>
  </entry>
  <entry>
    <title>3.关系模式的规范化</title>
    <url>/2022/06/29/3.%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96/</url>
    <content><![CDATA[<p>&emsp;</p>
<span id="more"></span>
<h1 id="一、1NF"><a href="#一、1NF" class="headerlink" title="一、1NF"></a>一、1NF</h1><p>如果关系模式 𝘙，其所有的属性均为简单属性，即每个属性都是不可再分的，则称 𝘙 属于第一范式（First Normal Form，1NF），记作 𝘙 $\in$ 1NF。</p>
<p>例如，教学关系模式中所有的属性都是不可再分的简单属性，即：教学 $\in$ 1NF。</p>
<h1 id="二、2NF"><a href="#二、2NF" class="headerlink" title="二、2NF"></a>二、2NF</h1><p>若 𝘙 $\in$ 1NF，且每一个非主属性完全依赖于码，则 𝘙 $\in$ 2NF。</p>
<p>例如，对于教学关系模式：教学 &lt;𝘜，𝘍&gt;</p>
<p>𝘜＝｛学号，姓名，年龄，性别，系名，系主任，课程名，成绩｝</p>
<p>𝘍＝｛学号 $\to$ 姓名，学号 $\to$ 年龄，学号 $\to$ 性别，学号 $\to$ 系名，系名 $\to$ 系主任，（学号，课程名） $\to$ 成绩｝</p>
<p>主码＝（学号，课程名）</p>
<p>非主属性＝（姓名，年龄，性别，系名，系主任，成绩）</p>
<p>非主属性对码的函数依赖＝｛（学号，课程名）$\stackrel{P}{\longrightarrow}$ 姓名，（学号，课程名）$\stackrel{P}{\longrightarrow}$ 年龄，（学号，课程名）$\stackrel{P}{\longrightarrow}$ 性别，（学号，课程名）$\stackrel{P}{\longrightarrow}$ 系名，（学号，课程名）$\stackrel{P}{\longrightarrow}$ 系主任，（学号，课程名）$\stackrel{F}{\longrightarrow}$ 成绩｝</p>
<p>显然，教学关系模式不服从 2NF，即：教学 $\notin$ 2NF。根据 2NF 的定义，将教学关系模式分解为两个关系模式：学生_系（学号，姓名，年龄，性别，系名，系主任），选课（学号，课程名，成绩）</p>
<h1 id="三、3NF"><a href="#三、3NF" class="headerlink" title="三、3NF"></a>三、3NF</h1><p>关系模式 𝘙&lt;𝘜，𝘍&gt; 中若不存在这样的码 𝘟、属性组 𝘠 及非主属性 𝘡（𝘡 $\nsubseteq$ 𝘠）使得 𝘟 $\to$ 𝘠、𝘠 $\nrightarrow$ 𝘟、𝘠 $\to$ 𝘡 成立，则称 𝘙&lt;𝘜，𝘍&gt; $\in$ 3NF。</p>
<p>可以证明，若 𝘙 $\in$ 3NF，则每一个非主属性既不传递依赖于码，也不部分依赖于码，即：关系模式 𝘙 是 3NF，则 𝘙 一定是 2NF。</p>
<blockquote>
<p>设 𝘙 $\in$ 3NF，𝘟 是关系 𝘙 的码，假设 𝘙 $\notin$ 2NF，则存在一个非主属性 𝘡 部分函数依赖于码，即 𝘟 $\stackrel{P}{\longrightarrow}$ 𝘡，从而存在 𝘠 $\subset$ 𝘟，𝘠 $\stackrel{F}{\longrightarrow}$ 𝘡（𝘡 $\nsubseteq$ 𝘠），并且有 𝘟 $\to$ 𝘠，这与 3NF 的定义矛盾，由此结论成立。</p>
</blockquote>
<p>例如，对于学生_系关系模式：学生_系（学号，姓名，年龄，性别，系名，系主任），会发现其中存在传递依赖关系，即：学号 $\to$ 系名，系名 $\to$ 系主任，则：学号 $\stackrel{传递}{\longrightarrow}$  系主任。由于主码“学号”与非主属性“系主任”之间存在传递函数依赖，所以学生_系 $\notin$ 3NF，可以按 3NF 的要求将其分解为以下两个关系模式：<br>学生（学号，姓名，年龄，性别，系名），教学系（系名，系主任）</p>
<h1 id="四、BCNF"><a href="#四、BCNF" class="headerlink" title="四、BCNF"></a>四、BCNF</h1><p>关系模式 𝘙&lt;𝘜，𝘍&gt; $\in$ 1NF，若 𝘟 $\to$ 𝘠 且 𝘠 $\nsubseteq$ 𝘟 时 𝘟 必含有码，则关系模式 𝘙&lt;𝘜，𝘍&gt; $\in$ BCNF。</p>
<p>如果关系模式 𝘙&lt;𝘜，𝘍&gt; $\in$ BCNF，由于 𝘙 排除了任何属性对码的传递函数依赖和部分函数依赖，所以 𝘙 一定属于 3NF。</p>
<p>由 BCNF 的定义可以得到，一个满足 BCNF 的关系模式必须满足以下条件：</p>
<p>（1）所有非主属性对每一个码都是完全函数依赖。</p>
<p>（2）所有的主属性对每一个不包含它的码，也是完全函数依赖。</p>
<p>（3）没有任何属性完全函数依赖于非码的任何一组属性。</p>
<p>例如，对于选课关系模式（学生，教师，课程），语义为：每位教师只能讲授一门课程，每门课程由若干教师讲授；每个学生选修某门课程对应一个固定的教师。由语义可以得到选课关系模式的函数依赖为：𝘍 = ｛（学生，课程）$\to$ 教师，（学生，教师）$\to$ 课程，教师 $\to$ 课程｝。这里（学生，课程）和（学生，教师）都是关系的码，所以关系模式的主属性集合为：｛学生，教师，课程｝，非主属性为：$\varnothing$。由于选课关系模式中无非主属性，所以它属于 3NF，但因为存在函数依赖：教师 $\to$ 课程，由于“教师”不是码，所以选课关系模式不属于 BCNF。可以按 BCNF 的要求将选课关系模式分解为以下两个关系模式：</p>
<p>学生_教师（学生，教师），教师_课程（教师，课程）</p>
<h1 id="五、4NF"><a href="#五、4NF" class="headerlink" title="五、4NF"></a>五、4NF</h1><p>关系模式 𝘙&lt;𝘜，𝘍&gt; $\in$ 1NF，如果对于 𝘙 的每个非平凡多值依赖 𝘟 $\to\to$ 𝘠（𝘠 $\nsubseteq$ 𝘟），𝘟 必含有码，则称 𝘙&lt;𝘜，𝘍&gt; $\in$ 4NF。</p>
<p>根据定义，4NF 要求每一个非平凡的多值依赖 𝘟 $\to\to$ 𝘠，𝘟都含有候选码，则必然是 𝘟 $\to$ 𝘠，所以 4NF 所允许的非平凡多值依赖实际上是函数依赖。显然，如果一个关系模式属于 4NF，则必然也属于 BCNF。</p>
<h1 id="六、5NF"><a href="#六、5NF" class="headerlink" title="六、5NF"></a>六、5NF</h1><p>如果关系模式 𝘙 中的每一个连接依赖均由 𝘙 的候选码所隐含，则称 𝘙 $\in$ 5NF。所谓“关系模式 𝘙 中的每一个连接依赖均由 𝘙 的候选码所隐含”是指在连接时，所连接的属性均为候选码。</p>
]]></content>
      <categories>
        <category>关系模式</category>
      </categories>
  </entry>
  <entry>
    <title>4.关系模式分解的算法基础</title>
    <url>/2022/07/02/4.%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F%E5%88%86%E8%A7%A3%E7%9A%84%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>&emsp;</p>
<span id="more"></span>
<h1 id="一、函数依赖的逻辑蕴含"><a href="#一、函数依赖的逻辑蕴含" class="headerlink" title="一、函数依赖的逻辑蕴含"></a>一、函数依赖的逻辑蕴含</h1><p>设 𝘍 是模式 𝘙&lt;𝘜&gt; 的函数依赖集，𝘟 和 𝘠 是属性集 𝘜 的子集。如果从 𝘍 中的函数依赖能推出 𝘟 $\to$ 𝘠，则称 𝘍 逻辑蕴含 𝘟 $\to$ 𝘠，或称 𝘟 $\to$ 𝘠 是 𝘍 的逻辑蕴含。</p>
<h1 id="二、Armstrong-公理系统"><a href="#二、Armstrong-公理系统" class="headerlink" title="二、Armstrong 公理系统"></a>二、Armstrong 公理系统</h1><h2 id="1-Armstrong-公理"><a href="#1-Armstrong-公理" class="headerlink" title="1. Armstrong 公理"></a>1. Armstrong 公理</h2><p>设 𝘜 为属性集，𝘍 是 𝘜 上的函数依赖集，于是有关系模式 𝘙&lt;𝘜，𝘍&gt;。对 𝘙&lt;𝘜，𝘍&gt; 来说，有以下的推理规则：</p>
<ul>
<li>自反律（Reflexivity）：若 𝘠 $\subseteq$ 𝘟 $\subseteq$ 𝘜，则 𝘟 $\to$ 𝘠 为 𝘍 所蕴含。</li>
<li>增广律（Augmentation）：若 𝘟 $\to$ 𝘠 为 𝘍 所蕴含，且 𝘡 $\subseteq$ 𝘜，则 𝘟𝘡 $\to$ 𝘠𝘡 为 𝘍 所蕴含。</li>
<li>传递律（Transitivity）：若 𝘟 $\to$ 𝘠 及 𝘠 $\to$ 𝘡 为 𝘍 所蕴含，则 𝘟 $\to$ 𝘡 为 𝘍 所蕴含。</li>
</ul>
<h2 id="2-Armstrong-公理的三个推理规则"><a href="#2-Armstrong-公理的三个推理规则" class="headerlink" title="2. Armstrong 公理的三个推理规则"></a>2. Armstrong 公理的三个推理规则</h2><p>根据 Armstrong 公理可以得到下面三条很有用的推理规则：</p>
<ul>
<li>合并规则（Union Rule）：由 𝘟 $\to$ 𝘠，𝘟 $\to$ 𝘡，有 𝘟 $\to$ 𝘠𝘡。</li>
<li>伪传递规则（Pseudo-transitivity Rule）：由 𝘟 $\to$ 𝘠，𝘞𝘠 $\to$ 𝘡，有 𝘞𝘟 $\to$ 𝘡。</li>
<li>分解规则（Decomposition Rule）：由 𝘟 $\to$ 𝘠 及 𝘡 $\subseteq$ 𝘠，有 𝘟 $\to$ 𝘡。</li>
</ul>
<h2 id="3-两个引理"><a href="#3-两个引理" class="headerlink" title="3. 两个引理"></a>3. 两个引理</h2><p>根据合并规则和分解规则，可以得到引理1；根据属性集闭包的定义和引理1，可以得到引理2。</p>
<p>引理1：$X \to A_1A_2\cdots A_k$ 成立的充分必要条件是 $X\to A_i(i=1,2,\cdots,k)$ 成立。</p>
<p>引理2：设 𝘍 为属性集 𝘜 上的一组函数依赖，𝘟、𝘠 $\subseteq$ 𝘜，𝘟 $\to$ 𝘠 能由 𝘍 根据 Armstrong 公理导出的充分必要条件是 $Y\subseteq X_F^+$。 </p>
<h2 id="4-Armstrong-公理是有效的和完备的"><a href="#4-Armstrong-公理是有效的和完备的" class="headerlink" title="4. Armstrong 公理是有效的和完备的"></a>4. Armstrong 公理是有效的和完备的</h2><p><strong>Armstrong 公理的有效性</strong>是指，在 𝘍 中根据 Armstrong 公理推导出来的每一个函数依赖一定为 𝘍 所逻辑蕴含。要证明 Armstrong 公理，即是要证明自反律、增广律、传递律。</p>
<p>（1）自反律</p>
<p>设 𝘠 $\subseteq$ 𝘟 $\subseteq$ 𝘜。对 𝘙&lt;𝘜，𝘍&gt; 的任一关系 𝘳 中的任意两个元组 𝘵、𝘴，若 𝘵[𝘟]＝𝘴[𝘟]，由于 𝘠 $\subseteq$ 𝘟，故有 𝘵[𝘠]＝𝘴[𝘠]，所以 𝘟 $\to$ 𝘠 成立，自反律得证。</p>
<p>（2）增广律</p>
<p>设 𝘟 $\to$ 𝘠 为 𝘍 所蕴含，且 𝘡 $\subseteq$ 𝘜。设 𝘙&lt;𝘜，𝘍&gt; 的任一关系 𝘳 中任意的两个元组 𝘵、𝘴，若 𝘵[𝘟𝘡]＝𝘴[𝘟𝘡]，则有 𝘵[𝘟]＝𝘴[𝘟] 和 𝘵[𝘡]＝𝘴[𝘡]。由 𝘟 $\to$ 𝘠，于是有 𝘵[𝘠]＝𝘴[𝘠]，所以 𝘵[𝘠𝘡]＝𝘴[𝘠𝘡]，𝘟𝘡 $\to$ 𝘠𝘡 为 𝘍 所蕴含，增广律得证。</p>
<p>（3）传递律</p>
<p>设 𝘟 $\to$ 𝘠 及 𝘠 $\to$ 𝘡 为 𝘍 所蕴含。对 𝘙&lt;𝘜，𝘍&gt; 的任一关系 𝘳 中的任意两个元组 𝘵、𝘴，若 𝘵[𝘟]＝𝘴[𝘟]，由于 𝘟 $\to$ 𝘠，有 𝘵[𝘠]＝𝘴[𝘠]；再由 𝘠 $\to$ 𝘡，有 𝘵[𝘡]＝𝘴[𝘡]，所以 𝘟 $\to$ 𝘡 为 𝘍 所蕴含，传递律得证。</p>
<p><strong>Armstrong 公理的完备性</strong>是指，𝘍 所逻辑蕴含的每一个函数依赖，必定可以由 𝘍 出发根据 Armstrong 公理推导出来。下面证明 Armstrong 公理完备性的逆否命题，即：若函数依赖 𝘟 $\to$ 𝘠 不能由 𝘍 从 Armstrong 公理导出，那么它必然不为 𝘍 所蕴含。其证明思路是构造一个具体的关系 𝘳 $\in$ 𝘙&lt;𝘜，𝘍&gt;，证明在关系 𝘳 中 𝘟 $\nrightarrow$ 𝘠，根据逻辑蕴含的定义，函数依赖 𝘟 $\to$ 𝘠 不为 𝘍 所蕴含。证明分三步。</p>
<p>（1）若 𝘝 $\to$ 𝘞 成立，且 $𝘝\subseteq X^+_F$，则 $W\subseteq X^+_F$。</p>
<p>证：因为 $𝘝\subseteq X^+_F$ ，由引理2，有 𝘟 $\to$ 𝘝 成立，于是 𝘟 $\to$ 𝘞 成立，所以 $W\subseteq X^+_F$。</p>
<p>（2）构造一张二维表 𝘳，它由两个元组构成，下面证明 𝘳 是 𝘙&lt;𝘜，𝘍&gt; 的一个关系，此时 𝘍 中的全部函数依赖在 𝘳 上成立。</p>
<p>证：设关系模式 𝘙&lt;𝘜，𝘍&gt; 中，$U=\{A_1,A_2,\cdots,A_n\}$，构造关系 𝘳 仅有两个元组，元组 $t_1=(1,1,\cdots,1)$，元组 $t_2$ 被定义为：</p>
<script type="math/tex; mode=display">
t_2=
\begin{cases}
1,\quad &A_i\in X^+_F \\
0,\quad &A_i\notin X^+_F
\end{cases}</script><p>故而关系 𝘳 的二维表如下：</p>
<script type="math/tex; mode=display">
\begin{aligned}
t_2:\overbrace{11\cdots\cdots\cdots1}^{X^+_F}\quad &\overbrace{00\cdots\cdots\cdots0}^{U-X^+_F}\\
t_1:11\cdots\cdots\cdots1\quad &11\cdots\cdots\cdots1
\end{aligned}</script><p>利用反证法，若 𝘳 不是 𝘙&lt;𝘜，𝘍&gt; 的关系，则一定是因为 𝘍 中有某一个函数依赖 𝘝 $\to$ 𝘞 在 𝘳 上不成立导致的，即 𝘝 $\nrightarrow$ 𝘞。依据属性集闭包和函数依赖的定义，由 𝘳 的构成可知，一定有 $𝘝\subseteq X^+_F$，而 $W\nsubseteq X^+_F$，这与 𝘢 中结论 $W\subseteq X^+_F$ 矛盾。所以 𝘳 必是 𝘙&lt;𝘜，𝘍&gt; 的一个关系。</p>
<p>（3）若 𝘟 $\to$ 𝘠 不能由 𝘍 从 Armstrong 公理导出，由引理2，有 $Y\nsubseteq X^+_F$ ，因此必有 𝘠 的子集 𝘠’ 满足 $Y’\subseteq U-X^+_F$，依据函数依赖的定义，𝘟 $\to$ 𝘠 在 𝘳 中不成立，即 𝘟 $\to$ 𝘠 必不为 𝘙&lt;𝘜，𝘍&gt; 所蕴含。</p>
<h1 id="三、闭包"><a href="#三、闭包" class="headerlink" title="三、闭包"></a>三、闭包</h1><h2 id="1-函数依赖集闭包"><a href="#1-函数依赖集闭包" class="headerlink" title="1. 函数依赖集闭包"></a>1. 函数依赖集闭包</h2><p>在关系模式 𝘙&lt;𝘜，𝘍&gt; 中，为 𝘍 所逻辑蕴含的函数依赖的全体叫做 𝘍 的闭包，记作 $F^+$。在一般情况下，$F\le F^+$。如果 $F=F^+$，则称 𝘍 是函数依赖的完备集。</p>
<h2 id="2-属性集闭包"><a href="#2-属性集闭包" class="headerlink" title="2. 属性集闭包"></a>2. 属性集闭包</h2><p>设有关系模式 𝘙&lt;𝘜，𝘍&gt;，𝘟 是 𝘜 的子集，称所有用公理从 𝘍 推出的函数依赖集 $X \to A_i$ 中 $A_i$ 的属性集为 𝘟 在 𝘍 上的属性闭包，记作 $X^+_F$，即：</p>
<script type="math/tex; mode=display">
X^+_F=\{A_i|A_i\in U,X\to A_i \in F^+\}</script><p>由公理的自反律可知 𝘟 $\to$ 𝘟，因此 $X\subseteq X^+_F$。</p>
<h2 id="3-属性集闭包的求法"><a href="#3-属性集闭包的求法" class="headerlink" title="3. 属性集闭包的求法"></a>3. 属性集闭包的求法</h2><p>（1）选 𝘟 作为闭包 $X_F^+$ 的初值 $X_F^{(0)}$。</p>
<p>（2）$X_F^{(i+1)}$ 是由 $X_F^{(i)}$ 并上集合 𝘈 组成的，其中，𝘈 为 𝘍 中存在的函数依赖 𝘠 $\to$ 𝘡，而且 $A\subseteq Z$，$Y\subseteq X_F^{(i)}$。</p>
<p>（3）重复上一步骤，一旦发现 $X_F^{(i)}=X_F^{(i+1)}$，则 $X_F^{(i)}$ 为所求的 $X_F^+$。</p>
<p>例题：已知关系 𝘙&lt;𝘜，𝘍&gt;，其中 𝘜＝｛𝘈，𝘉，𝘊，𝘋，𝘌｝，𝘍＝｛𝘈𝘉 $\to$ 𝘊，𝘉 $\to$ 𝘋，𝘊 $\to$ 𝘌，𝘌𝘊 $\to$ 𝘉，𝘈𝘊 $\to$ 𝘉｝，求 $(AB)^+_F$。</p>
<p>$X_F^{(0)}$＝𝘈𝘉；𝘈𝘉 为闭包初值</p>
<p>$X_F^{(1)}$＝𝘈𝘉𝘊𝘋；由 𝘈𝘉 $\to$ 𝘊，𝘉 $\to$ 𝘋 可得 𝘊𝘋 在闭包中</p>
<p>$X_F^{(2)}$＝𝘈𝘉𝘊𝘋𝘌；由 𝘊 $\to$ 𝘌 可得 𝘌 在闭包中</p>
<p>$X_F^{(3)}=X_F^{(2)}$＝𝘈𝘉𝘊𝘋𝘌；进一步求得的结果与上一步结果相同，结束。</p>
<p>所以 $(AB)^+_F$＝𝘈𝘉𝘊𝘋𝘌＝｛𝘈，𝘉，𝘊，𝘋，𝘌｝。</p>
<h1 id="四、函数依赖集"><a href="#四、函数依赖集" class="headerlink" title="四、函数依赖集"></a>四、函数依赖集</h1><h2 id="1-函数依赖集的等价和覆盖"><a href="#1-函数依赖集的等价和覆盖" class="headerlink" title="1. 函数依赖集的等价和覆盖"></a>1. 函数依赖集的等价和覆盖</h2><p>设 𝘍 和 𝘎 是两个函数依赖集，如果 $F^+$＝$G^+$，则称 𝘍 和 𝘎 等价。𝘍 和 𝘎 等价说明 𝘍 覆盖 𝘎，同时 𝘎 也覆盖 𝘍。</p>
<h2 id="2-判定两函数依赖集等价的方法"><a href="#2-判定两函数依赖集等价的方法" class="headerlink" title="2. 判定两函数依赖集等价的方法"></a>2. 判定两函数依赖集等价的方法</h2><p>从定义可知，判断 𝘍 和 𝘎 是否等价就是要判断它们是否相互覆盖，既要检查是否 𝘍 $\subseteq$ 𝘎$^+$，又要检查是否 𝘎 $\subseteq$ 𝘍$^+$，如果两者都成立才能确定 𝘍 和 𝘎 等价，具体判断方法如下：</p>
<p>（1）在 𝘎 上计算 $X_G^+$，看是否 $Y \subseteq X_G^+$。若是，则说明 𝘟 $\to$ 𝘠 $\subseteq$ 𝘎$^+$，于是继续检查 𝘍 中的其他依赖，如果全部满足 𝘟 $\to$ 𝘠 $\subseteq$ 𝘎$^+$，则 𝘍 $\subseteq$ 𝘎$^+$。</p>
<p>（2）如果在检查中发现有一个 𝘟 $\to$ 𝘠 不属于 𝘎$^+$，就可以判定 𝘍 $\subseteq$ 𝘎$^+$ 不成立，于是 𝘍 和 𝘎 也就不等价。</p>
<p>（3）如果经判断 𝘍 $\subseteq$ 𝘎$^+$，则类似地重复上述做法，判断是否 𝘎 $\subseteq$ 𝘍$^+$，如果成立，则可以判定 𝘍 和 𝘎 等价。</p>
<h2 id="3-最小函数依赖集"><a href="#3-最小函数依赖集" class="headerlink" title="3. 最小函数依赖集"></a>3. 最小函数依赖集</h2><p>每一个函数依赖集 𝘍 均等价于一个极小函数依赖集 $F_m$，此 $F_m$ 称为 𝘍 的最小依赖集。如果函数依赖集 𝘍 满足下列条件，则称 𝘍 为一个极小函数依赖集，亦称为最小依赖集或最小覆盖：</p>
<ul>
<li><p>𝘍 中任一函数依赖的右部仅含有一个属性。</p>
</li>
<li><p>𝘍 中不存在这样的函数依赖 𝘟 $\to$ 𝘈，使得 𝘍 与 𝘍 $-$｛𝘟 $\to$ 𝘈｝ 等价。</p>
</li>
<li><p>𝘍 中不存在这样的函数依赖 𝘟 $\to$ 𝘈，𝘟 有真子集 𝘡 使得 𝘍 $-$｛𝘟 $\to$ 𝘈｝$\cup$ ｛𝘡 $\to$ 𝘈｝ 与 𝘍 等价。</p>
</li>
</ul>
<p>在这个定义中，条件 a. 说明，在最小函数依赖集中的所有函数依赖都应该是“右端没有多余的属性”的最简单的形式；条件 b. 保证了最小函数依赖集中无多余的函数依赖；条件 c. 要求，最小函数依赖集中的每个函数依赖的左端没有多余的属性。</p>
<h2 id="4-最小函数依赖集的求法"><a href="#4-最小函数依赖集的求法" class="headerlink" title="4. 最小函数依赖集的求法"></a>4. 最小函数依赖集的求法</h2><p>分三步对 𝘍 进行极小化处理，找出 𝘍 的一个最小依赖集：</p>
<p>（1）逐一检查 𝘍 中各函数依赖 𝘟 $\to$ 𝘠，若 $Y=A_1A_2\cdots A_k,k\ge2$，则用 $\{X\to A_j | j=1,2,\cdots,k\}$ 来取代 𝘟 $\to$ 𝘠。</p>
<p>（2）逐一取出 𝘍 中各函数依赖 𝘟 $\to$ 𝘈，令 𝘎＝𝘍 $-$｛𝘟 $\to$ 𝘈｝，若 $A\in X^+_G$，则从 𝘍 中去掉此函数依赖（因为 𝘍 与 𝘎 等价的充要条件是 $A\in X^+_G$）。</p>
<p>（3）逐一取出 𝘍 中各函数依赖 𝘟 $\to$ 𝘈，设 $X=B_1B_2\cdots B_m$，逐一检查 $B_i(i=1,2,\cdots,m)$，如果 $A\in (X-B_i)^+_F$，则以 𝘟 $-$ 𝘉$_i$ 取代 𝘟（因为 𝘍 与 𝘍 $-$｛𝘟 $\to$ 𝘈｝$\cup$ ｛(𝘟 $-$ 𝘉$_i$) $\to$ 𝘈｝ 等价的充要条件是 $A\in (X-B_i)^+_F$）。</p>
<p>因为对 𝘍 的每一次改造都保证了改造前后的两个函数依赖集等价，最后得到的 𝘍 就一定是极小依赖集，并且与原来的 𝘍 等价。应当指出的是，𝘍 的最小依赖集 $F_m$ 不一定是唯一的，它与对各函数依赖及 𝘟 $\to$ 𝘈 中 𝘟 各属性的处置有关。</p>
<h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h3><p>设 𝘍＝｛𝘈 $\to$ 𝘉𝘊，𝘉 $\to$ 𝘈𝘊，𝘊 $\to$ 𝘈｝，对 𝘍 进行极小化处理。</p>
<p>（1）根据分解规则把 𝘍 中的函数依赖转换成右部都是单属性的函数依赖集合，分解后的函数依赖集仍用 𝘍 表示：</p>
<script type="math/tex; mode=display">
F=\{A\to B,A\to C,B\to A,B\to C,C\to A\}</script><p>（2）去掉 𝘍 中冗余的函数依赖。</p>
<p>① 判断 𝘈 $\to$ 𝘉 是否冗余：</p>
<p>设 $G_1=\{A\to C,B\to A,B\to C,C\to A\}$，得 $A^+_{G1}=AC$。</p>
<p>因为 $B\notin A^+_{G1}$，所以 𝘈 $\to$ 𝘉 不冗余。</p>
<p>② 判断 𝘈 $\to$ 𝘊 是否冗余：</p>
<p>设 $G_2=\{A\to B,B\to A,B\to C,C\to A\}$，得 $A^+_{G2}=ABC$。</p>
<p>因为 $C\in A^+_{G2}$，所以 𝘈 $\to$ 𝘊 冗余（以后的检查不再考虑 𝘈 $\to$ 𝘊）。</p>
<p>③ 判断 𝘉 $\to$ 𝘈 是否冗余：</p>
<p>设 $G_3=\{A\to B,B\to C,C\to A\}$，得 $B^+_{G3}=BCA$。</p>
<p>因为 $A\in B^+_{G3}$，所以 𝘉 $\to$ 𝘈 冗余（以后的检查不再考虑 𝘉 $\to$ 𝘈）。</p>
<p>④ 判断 𝘉 $\to$ 𝘊 是否冗余：</p>
<p>设 $G_4=\{A\to B，C\to A\}$，得 $B^+_{G4}=B$。</p>
<p>因为 $C\notin B^+_{G4}$，所以 𝘉 $\to$ 𝘊 不冗余。</p>
<p>⑤ 判断 𝘊 $\to$ 𝘈 是否冗余：</p>
<p>设 $G_5=\{A\to B，B\to C\}$，得 $C^+_{G5}=C$。</p>
<p>因为 $A\notin C^+_{G5}$，所以 𝘊 $\to$ 𝘈 不冗余。</p>
<p>故最小依赖集为 $F_m=\{A\to B,B\to C,C\to A\}$。</p>
<h3 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h3><p>求 𝘍＝｛𝘈𝘉 $\to$ 𝘊，𝘈 $\to$ 𝘉，𝘉 $\to$ 𝘈｝的最小函数依赖集 $F_m$。</p>
<p>（1）将 𝘍 中的函数依赖都分解为右部为单属性的函数依赖，很显然，𝘍 满足该条件。</p>
<p>（2）去掉 𝘍 中冗余的函数依赖。</p>
<p>① 判断 𝘈𝘉 $\to$ 𝘊 是否冗余：</p>
<p>设 $G_1=\{A\to B,B\to A\}$，得 $(AB)_{G1}^+=AB$。</p>
<p>因为 $C\notin (AB)_{G1}^+ $，所以 𝘈𝘉 $\to$ 𝘊 不冗余。</p>
<p>② 判断 𝘈 $\to$ 𝘉 是否冗余：</p>
<p>设 $G_2=\{AB\to C,B\to A\}$，得 $A^+_{G2}=A$。</p>
<p>因为 $B\notin A^+_{G2}$，所以 𝘈 $\to$ 𝘉 不冗余。</p>
<p>③ 判断 𝘉 $\to$ 𝘈 是否冗余：</p>
<p>设 $G_3=\{AB\to C,A\to B\}$，得 $B_{G3}^+=B$。</p>
<p>因为 $A\notin B_{G3}^+$，所以 𝘉 $\to$ 𝘈 不冗余。</p>
<p>经过检验后的函数依赖集仍然为 𝘍。</p>
<p>（3）去掉各函数依赖左部冗余的属性。</p>
<p>本例只需考虑 𝘈𝘉 $\to$ 𝘊 的情况。</p>
<p>方法1：在决定因素中去掉 𝘉，求 $A_F^+$，若 $C\in A^+_F$，则以 𝘈 $\to$ 𝘊 代替 𝘈𝘉 $\to$ 𝘊。</p>
<p>求得 $A^+_F=ABC$，因为 $C\in A^+_F$，所以，以 𝘈 $\to$ 𝘊 代替 𝘈𝘉 $\to$ 𝘊。</p>
<p>故 $F_m=\{A\to C,A\to B,B\to A\}$。</p>
<p>方法2： 在决定因素中去掉 𝘈，求$B^+_F$，若 $C\in B^+_F$，则以 𝘉 $\to$ 𝘊 代替 𝘈𝘉 $\to$ 𝘊。</p>
<p>求得 $B^+_F=ABC$，因为 $C\in B^+_F$，所以，以 𝘉 $\to$ 𝘊 代替 𝘈𝘉 $\to$ 𝘊。</p>
<p>故 $F_m=\{B\to C,A\to B,B\to A\}$。</p>
<h1 id="五、关系模式码的求法"><a href="#五、关系模式码的求法" class="headerlink" title="五、关系模式码的求法"></a>五、关系模式码的求法</h1><p>设 𝘙&lt;𝘈$_1$，𝘈$_2$，$\cdots$，𝘈$_n$&gt; 为一关系模式，𝘍 为 𝘙 所满足的一组函数依赖，𝘟 为｛𝘈$_1$，𝘈$_2$，$\cdots$，𝘈$_n$｝的子集，如果 𝘟 满足以下条件：</p>
<ul>
<li>𝘟 $\to$ 𝘈$_1$，𝘈$_2$，$\cdots$，𝘈$_n\in$ 𝘍$^+$。</li>
<li>不存在 𝘟 的真子集 𝘠，𝘠 $\subset$ 𝘟，𝘠 $\to$ 𝘈$_1$，𝘈$_2$，$\cdots$，𝘈$_n\in$ 𝘍$^+$。</li>
</ul>
<p>则称 𝘟 是关系模式的码。</p>
<p>上述定义实际上也就是求关系模式码的方法。</p>
]]></content>
      <categories>
        <category>关系模式</category>
      </categories>
  </entry>
  <entry>
    <title>5.关系模式分解的规范化性质</title>
    <url>/2022/07/03/5.%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F%E5%88%86%E8%A7%A3%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96%E6%80%A7%E8%B4%A8/</url>
    <content><![CDATA[<p>&emsp;</p>
<span id="more"></span>
<h1 id="一、分解"><a href="#一、分解" class="headerlink" title="一、分解"></a>一、分解</h1><p>（1）分解的定义</p>
<p>关系模式 𝘙&lt;𝘜，𝘍&gt; 的一个分解是指 </p>
<script type="math/tex; mode=display">
\rho=\{R_1<U_1,F_1>,R_2<U_2,F_2>,\cdots,R_n<U_n,F_n>\}</script><p>其中 $U=\bigcup\limits^n_{i=1}U_i$，并且没有 $U_i\subseteq U_j$，1 $\le$ 𝘪，𝘫 $\le$ 𝘯，𝘍$_i$ 是 𝘍 在 𝘜$_i$ 上的投影。</p>
<p>（2）函数依赖的投影</p>
<p>函数依赖集合｛𝘟 $\to$ 𝘠 | 𝘟 $\to$ 𝘠 $\in$ 𝘍$^+$ $\wedge$ 𝘟𝘠 $\subseteq$ 𝘜$_i$｝的一个覆盖 𝘍$_i$ 叫做 𝘍 在属性 𝘜$_i$ 上的投影。</p>
<p>例如，在关系模式 𝘙&lt;𝘜，𝘍&gt; 中，𝘍 为 𝘙 上的函数依赖集，𝘍＝｛𝘈 $\to$ 𝘉，𝘉 $\to$ 𝘊，𝘈 $\to$ 𝘋，𝘋 $\to$ 𝘊｝，$\rho$＝｛𝘈𝘉，𝘈𝘊，𝘉𝘋｝是 𝘙 的一个分解，则：$\pi_{AB}(F)=\{A\to B\}$，$\pi_{AC}(F)=\{A\to C\}$，$\pi_{BD}(F)=\varnothing$。</p>
<h1 id="二、无损连接性（Lossless-Join）"><a href="#二、无损连接性（Lossless-Join）" class="headerlink" title="二、无损连接性（Lossless Join）"></a>二、无损连接性（Lossless Join）</h1><p>（1）两个关系的无损连接性</p>
<p>设关系模式 𝘙，如果把它分解为两个（或多个）子模式 $R_1$ 和 $R_2$，相应一个 𝘙 关系中是数据就要被分成 $R_1$、$R_2$ 两个（或多个）子表。假如把这些子表自然连接，即进行 $R_1 \Join R_2$ 操作，得到的结果与原来关系中的数据一致，信息并没有丢失，则称该分解具有无损连接性，否则如果 $R\neq R_1 \Join R_2$，则称该分解不具有无损连接性。</p>
<p>（2）无损连接性的形式化定义</p>
<p>引入记号，设 $\rho$ ＝｛𝘙$_1$&lt;𝘜$_1$，𝘍$_1$&gt;，$\cdots$，𝘙$_k$&lt;𝘜$_k$，𝘍$_k$&gt;｝是 𝘙&lt;𝘜，𝘍&gt; 的一个分解，𝘳 是 𝘙&lt;𝘜，𝘍&gt; 的一个关系，定义 $m_\rho(r)=\mathop{\Join}\limits^k_{i=1}\pi_{R_i}(r)$，即 $m_\rho(r)$ 是 𝘳 在 $\rho$ 中各关系模式上投影的自然连接，这里 $\pi_{R_i}(r)=\{t.U_i|t\in r\}$。根据该记号可以对无损连接性进行形式化定义，设 $\rho$ ＝｛𝘙$_1$&lt;𝘜$_1$，𝘍$_1$&gt;，$\cdots$，𝘙$_k$&lt;𝘜$_k$，𝘍$_k$&gt;｝是 𝘙&lt;𝘜，𝘍&gt; 的一个分解，若对 𝘙&lt;𝘜，𝘍&gt; 的任何一个关系 𝘳 均有 $r=m_\rho(r)$ 成立，则称分解 $\rho$ 具有无损连接性，简称 $\rho$ 为无损分解。</p>
<h2 id="1-保持无损连接性的判定"><a href="#1-保持无损连接性的判定" class="headerlink" title="1. 保持无损连接性的判定"></a>1. 保持无损连接性的判定</h2><p>设 $\rho$ ＝｛𝘙$_1$&lt;𝘜$_1$，𝘍$_1$&gt;，$\cdots$，𝘙$_k$&lt;𝘜$_k$，𝘍$_k$&gt;｝是 𝘙&lt;𝘜，𝘍&gt; 的一个分解，𝘜＝｛𝘈$_1$，𝘈$_2$，$\cdots$，𝘈$_n$｝。</p>
<p>（1）建立一张 𝘬 行 𝘯 列的表，每一行对应分解中的一个关系模式，每一列对应一个属性，若属性 𝘈$_j$ 属于 𝘜$_i$，则在 𝘪 行 𝘫 列处填上 𝘢$_j$，否则填上 𝘣$_{ij}$。</p>
<p>（2）根据 𝘍 中每一个函数依赖（例如 𝘟 $\to$ 𝘠）修改表的内容，修改规则为：在 𝘟 所对应的列中，寻找符号相同的行，在这些行上修改属性 𝘠 所在列上的值，若其中有 𝘢$_j$，则全部改为 𝘢$_j$，否则全部改为 𝘣$_{mj}$，𝘮 是这些行的行号最小值。应当注意的是，若某个值 𝘣$_{tj}$ 被更改，那么该表的 𝘫 列中凡是值为 𝘣$_{tj}$ 的行，不管它是否是开始找到的那些行，均应做相应的更改。</p>
<p>（3）如果在某次更改之后，有一行成为 𝘢$_1$，𝘢$_2$，$\cdots$，𝘢$_n$，则算法终止，$\rho$ 具有无损连接性；否则 $\rho$ 不具有无损连接性。对扫描前后进行比较，观察表是否发生变化，如有变化，则返回第（2）步，否则算法终止。</p>
<p><strong>例题</strong>：设 𝘙&lt;𝘜，𝘍&gt;，𝘜＝｛𝘈，𝘉，𝘊，𝘋，𝘌｝，𝘍＝｛𝘈 $\to$ 𝘋，𝘌 $\to$ 𝘋，𝘋 $\to$ 𝘉，𝘉𝘊 $\to$ 𝘋，𝘋𝘊 $\to$ 𝘈｝，𝘙 的一个分解为 $\rho$＝｛𝘙$_1$&lt;𝘈，𝘉&gt;，𝘙$_2$&lt;𝘈，𝘌&gt;，𝘙$_3$&lt;𝘊，𝘌&gt;，𝘙$_4$&lt;𝘉，𝘊，𝘋&gt;，𝘙$_5$&lt;𝘈，𝘊&gt;｝，判断该分解是否具有无损连接性。</p>
<p>（1）构造初始表</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">𝘈</th>
<th style="text-align:center">𝘉</th>
<th style="text-align:center">𝘊</th>
<th style="text-align:center">𝘋</th>
<th style="text-align:center">𝘌</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">𝘙$_1$&lt;𝘈，𝘉&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘣$_{13}$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘣$_{15}$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_2$&lt;𝘈，𝘌&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘣$_{22}$</td>
<td style="text-align:center">𝘣$_{23}$</td>
<td style="text-align:center">𝘣$_{24}$</td>
<td style="text-align:center">𝘢$_5$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_3$&lt;𝘊，𝘌&gt;</td>
<td style="text-align:center">𝘣$_{31}$</td>
<td style="text-align:center">𝘣$_{32}$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘣$_{34}$</td>
<td style="text-align:center">𝘢$_5$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_4$&lt;𝘉，𝘊，𝘋&gt;</td>
<td style="text-align:center">𝘣$_{41}$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘢$_4$</td>
<td style="text-align:center">𝘣$_{45}$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_5$&lt;𝘈，𝘊&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘣$_{52}$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘣$_{54}$</td>
<td style="text-align:center">𝘣$_{55}$</td>
</tr>
</tbody>
</table>
</div>
<p>（2）根据函数依赖修改表的内容</p>
<p>① 函数依赖 𝘈 $\to$ 𝘋</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">𝘈</th>
<th style="text-align:center">𝘉</th>
<th style="text-align:center">𝘊</th>
<th style="text-align:center">𝘋</th>
<th style="text-align:center">𝘌</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">𝘙$_1$&lt;𝘈，𝘉&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘣$_{13}$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘣$_{15}$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_2$&lt;𝘈，𝘌&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘣$_{22}$</td>
<td style="text-align:center">𝘣$_{23}$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘢$_5$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_3$&lt;𝘊，𝘌&gt;</td>
<td style="text-align:center">𝘣$_{31}$</td>
<td style="text-align:center">𝘣$_{32}$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘣$_{34}$</td>
<td style="text-align:center">𝘢$_5$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_4$&lt;𝘉，𝘊，𝘋&gt;</td>
<td style="text-align:center">𝘣$_{41}$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘢$_4$</td>
<td style="text-align:center">𝘣$_{45}$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_5$&lt;𝘈，𝘊&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘣$_{52}$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘣$_{55}$</td>
</tr>
</tbody>
</table>
</div>
<p>② 函数依赖 𝘌 $\to$ 𝘋</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">𝘈</th>
<th style="text-align:center">𝘉</th>
<th style="text-align:center">𝘊</th>
<th style="text-align:center">𝘋</th>
<th style="text-align:center">𝘌</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">𝘙$_1$&lt;𝘈，𝘉&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘣$_{13}$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘣$_{15}$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_2$&lt;𝘈，𝘌&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘣$_{22}$</td>
<td style="text-align:center">𝘣$_{23}$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘢$_5$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_3$&lt;𝘊，𝘌&gt;</td>
<td style="text-align:center">𝘣$_{31}$</td>
<td style="text-align:center">𝘣$_{32}$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘢$_5$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_4$&lt;𝘉，𝘊，𝘋&gt;</td>
<td style="text-align:center">𝘣$_{41}$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘢$_4$</td>
<td style="text-align:center">𝘣$_{45}$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_5$&lt;𝘈，𝘊&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘣$_{52}$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘣$_{55}$</td>
</tr>
</tbody>
</table>
</div>
<p>③ 函数依赖 𝘋 $\to $ 𝘉，这里 𝘣$_{14}$ 对应的 𝘉 列有 𝘢$_2$，故以 𝘣$_{14}$ 为基准</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">𝘈</th>
<th style="text-align:center">𝘉</th>
<th style="text-align:center">𝘊</th>
<th style="text-align:center">𝘋</th>
<th style="text-align:center">𝘌</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">𝘙$_1$&lt;𝘈，𝘉&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘣$_{13}$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘣$_{15}$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_2$&lt;𝘈，𝘌&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘣$_{23}$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘢$_5$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_3$&lt;𝘊，𝘌&gt;</td>
<td style="text-align:center">𝘣$_{31}$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘢$_5$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_4$&lt;𝘉，𝘊，𝘋&gt;</td>
<td style="text-align:center">𝘣$_{41}$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘢$_4$</td>
<td style="text-align:center">𝘣$_{45}$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_5$&lt;𝘈，𝘊&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘣$_{55}$</td>
</tr>
</tbody>
</table>
</div>
<p>④ 函数依赖 𝘉𝘊 $\to$ 𝘋</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">𝘈</th>
<th style="text-align:center">𝘉</th>
<th style="text-align:center">𝘊</th>
<th style="text-align:center">𝘋</th>
<th style="text-align:center">𝘌</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">𝘙$_1$&lt;𝘈，𝘉&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘣$_{13}$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘣$_{15}$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_2$&lt;𝘈，𝘌&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘣$_{23}$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘢$_5$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_3$&lt;𝘊，𝘌&gt;</td>
<td style="text-align:center">𝘣$_{31}$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘢$_4$</td>
<td style="text-align:center">𝘢$_5$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_4$&lt;𝘉，𝘊，𝘋&gt;</td>
<td style="text-align:center">𝘣$_{41}$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘢$_4$</td>
<td style="text-align:center">𝘣$_{45}$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_5$&lt;𝘈，𝘊&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘢$_4$</td>
<td style="text-align:center">𝘣$_{55}$</td>
</tr>
</tbody>
</table>
</div>
<p>⑤ 函数依赖 𝘋𝘊 $\to$ 𝘈</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">𝘈</th>
<th style="text-align:center">𝘉</th>
<th style="text-align:center">𝘊</th>
<th style="text-align:center">𝘋</th>
<th style="text-align:center">𝘌</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">𝘙$_1$&lt;𝘈，𝘉&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘣$_{13}$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘣$_{15}$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_2$&lt;𝘈，𝘌&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘣$_{23}$</td>
<td style="text-align:center">𝘣$_{14}$</td>
<td style="text-align:center">𝘢$_5$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_3$&lt;𝘊，𝘌&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘢$_4$</td>
<td style="text-align:center">𝘢$_5$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_4$&lt;𝘉，𝘊，𝘋&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘢$_4$</td>
<td style="text-align:center">𝘣$_{45}$</td>
</tr>
<tr>
<td style="text-align:center">𝘙$_5$&lt;𝘈，𝘊&gt;</td>
<td style="text-align:center">𝘢$_1$</td>
<td style="text-align:center">𝘢$_2$</td>
<td style="text-align:center">𝘢$_3$</td>
<td style="text-align:center">𝘢$_4$</td>
<td style="text-align:center">𝘣$_{55}$</td>
</tr>
</tbody>
</table>
</div>
<p>（3）表中第三行为 𝘢$_1$，𝘢$_2$，$\cdots$，$a_5$，算法终止，$\rho$ 具有无损连接性。</p>
<h2 id="2-两个关系保持无损连接性的判定"><a href="#2-两个关系保持无损连接性的判定" class="headerlink" title="2. 两个关系保持无损连接性的判定"></a>2. 两个关系保持无损连接性的判定</h2><p>当一个关系 𝘙 分解成 𝘙$_1$ 和 𝘙$_2$ 两个关系时，可通过下面的定理判断分解是否保持无损连接性。</p>
<p>定理：𝘙&lt;𝘜，𝘍&gt; 的一个分解  $\rho$＝｛𝘙$_1$&lt;𝘜$_1$，𝘍$_1$&gt;，𝘙$_2$&lt;𝘜$_2$，𝘍$_2$&gt;｝具有无损连接性的充要条件如下：</p>
<script type="math/tex; mode=display">
U_1\cap U_2\to U_1 - U_2 \in F^+</script><p>或</p>
<script type="math/tex; mode=display">
U_1\cap U_2\to U_2 - U_1 \in F^+</script><h1 id="三、依赖保持性"><a href="#三、依赖保持性" class="headerlink" title="三、依赖保持性"></a>三、依赖保持性</h1><p>设 𝘙&lt;𝘜，𝘍&gt; 的分解 $\rho$ ＝｛𝘙$_1$&lt;𝘜$_1$，𝘍$_1$&gt;，$\cdots$，𝘙$_k$&lt;𝘜$_k$，𝘍$_k$&gt;｝，若 $F^+=(\cup F_i)^+$，则称分解 $\rho$ 保持函数依赖。</p>
<p><strong>例题</strong>：关系默认 𝘙＝｛𝘊𝘐𝘛𝘠，𝘚𝘛，𝘡𝘐𝘗｝，其中 𝘊𝘐𝘛𝘠 为城市，𝘚𝘛 为街道，𝘡𝘐𝘗 为邮政编码，𝘍＝｛（𝘊𝘐𝘛𝘠，𝘚𝘛）$\to$ 𝘡𝘐𝘗，𝘡𝘐𝘗 $\to$ 𝘊𝘐𝘛𝘠｝。如果将 𝘙 分解成 𝘙$_1$ 和 𝘙$_2$，𝘙$_1$＝｛𝘚𝘛，𝘡𝘐𝘗｝，𝘙$_2$＝｛𝘊𝘐𝘛𝘠，𝘡𝘐𝘗｝，检查分解是否具有无损连接性和依赖保持性。</p>
<p>（1）检查无损连接性。</p>
<p>求得：𝘙$_1$ $\cap$ 𝘙$_2$＝｛𝘡𝘐𝘗｝，𝘙$_2$ $-$ 𝘙$_1$＝｛𝘊𝘐𝘛𝘠｝。</p>
<p>因为（𝘡𝘐𝘗 $\to$ 𝘊𝘐𝘛𝘠）$\in$ 𝘍$^+$，所以，分解具有无损连接性。</p>
<p>（2）检查依赖保持性。</p>
<p>求得：$\pi_{R_1}(F)=\varnothing$，$\pi_{R_2}(F)$＝｛𝘡𝘐𝘗 $\to$ 𝘊𝘐𝘛𝘠｝。</p>
<p>因为 $(\pi_{R_1}(F)\cup \pi_{R_2}(F))^+$＝｛𝘡𝘐𝘗 $\to$ 𝘊𝘐𝘛𝘠｝$\neq$ 𝘍$^+$，所以，分解不具有依赖保持性。</p>
]]></content>
      <categories>
        <category>关系模式</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo配置指南</title>
    <url>/2022/07/02/Hexo%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>&emsp;</p>
<span id="more"></span>
<h1 id="前置依赖环境"><a href="#前置依赖环境" class="headerlink" title="前置依赖环境"></a>前置依赖环境</h1><ul>
<li><p><code>git</code></p>
</li>
<li><p><code>node v12.15.0</code></p>
</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hexo init     <span class="comment"># 初始化静态博客</span></span><br><span class="line">npm install   <span class="comment"># 安装依赖项</span></span><br><span class="line">hexo server   <span class="comment"># 开启本地服务端口</span></span><br></pre></td></tr></table></figure>
<h1 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h1><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p><code>\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><p><code>\themes\next\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hexo new page tags         <span class="comment"># 生成标签页</span></span><br><span class="line">hexo new page categories   <span class="comment"># 生成目录页</span></span><br></pre></td></tr></table></figure>
<p><code>\source\categories\index.md</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">目录</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br></pre></td></tr></table></figure>
<p><code>\source\tags\index.md</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br></pre></td></tr></table></figure>
<h2 id="主题模式"><a href="#主题模式" class="headerlink" title="主题模式"></a>主题模式</h2><p><code>\themes\next\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p><code>\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p><code>\themes\next\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="文本折叠"><a href="#文本折叠" class="headerlink" title="文本折叠"></a>文本折叠</h2><p><code>\themes\next\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>在<code>Front-matter</code>下方键入</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&amp;emsp;</span><br><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>
<h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p><code>\themes\next\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">solarized</span></span><br></pre></td></tr></table></figure>
<h2 id="排序依据"><a href="#排序依据" class="headerlink" title="排序依据"></a>排序依据</h2><p><code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-name</span></span><br></pre></td></tr></table></figure>
<p><code>\node_modules\hexo-generator-tag\lib</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">orderBy</span> <span class="string">=</span> <span class="string">config.tag_generator.order_by</span> <span class="string">||</span> <span class="string">&#x27;-name&#x27;</span><span class="string">;</span></span><br></pre></td></tr></table></figure>
<p><code>\node_modules\hexo-generator-category\lib</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">orderBy</span> <span class="string">=</span> <span class="string">config.category_generator.order_by</span> <span class="string">||</span> <span class="string">&#x27;-name&#x27;</span><span class="string">;</span></span><br></pre></td></tr></table></figure>
<p><code>\node_modules\hexo-generator-archive\lib</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">allPosts</span> <span class="string">=</span> <span class="string">locals.posts.sort(config.archive_generator.order_by</span> <span class="string">||</span> <span class="string">&#x27;-name&#x27;</span><span class="string">);</span></span><br></pre></td></tr></table></figure>
<h2 id="去除标题序号"><a href="#去除标题序号" class="headerlink" title="去除标题序号"></a>去除标题序号</h2><p><code>\themes\next\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="隐藏创建-更新时间"><a href="#隐藏创建-更新时间" class="headerlink" title="隐藏创建/更新时间"></a>隐藏创建/更新时间</h2><p><code>\themes\next\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">updated_at:</span> </span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="PDF-渲染支持"><a href="#PDF-渲染支持" class="headerlink" title="PDF 渲染支持"></a>PDF 渲染支持</h2><blockquote>
<p>npm install —save hexo-pdf</p>
</blockquote>
<p><code>\themes\next\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pdf:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Default height</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">500px</span></span><br></pre></td></tr></table></figure>
<p><code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>hexo new page filename</p>
</blockquote>
<p>在生成的 filename 文件夹中放入PDF文件，再回到 md 文件中使用 <code>&#123;% pdf 文件名.pdf %&#125;</code> 引用PDF文件</p>
<h2 id="mathjax渲染支持"><a href="#mathjax渲染支持" class="headerlink" title="mathjax渲染支持"></a>mathjax渲染支持</h2><h3 id="更换渲染器"><a href="#更换渲染器" class="headerlink" title="更换渲染器"></a>更换渲染器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<h3 id="开启主题渲染"><a href="#开启主题渲染" class="headerlink" title="开启主题渲染"></a>开启主题渲染</h3><p><code>\themes\next\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="禁用文章渲染"><a href="#禁用文章渲染" class="headerlink" title="禁用文章渲染"></a>禁用文章渲染</h3><p><code>\scaffolds\post.md</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125;</span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span>  <span class="comment"># 在文章front-matter中需要写true开启渲染</span></span><br></pre></td></tr></table></figure>
<h3 id="解决转义冲突"><a href="#解决转义冲突" class="headerlink" title="解决转义冲突"></a>解决转义冲突</h3><p><code>\node_modules\kramed\lib\rules\inline.js</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">/**</span></span><br><span class="line"> <span class="string">*</span> <span class="string">修改下列转义规则</span></span><br><span class="line"> <span class="string">*</span> <span class="attr">escape:</span> <span class="string">/^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line"> <span class="string">*</span> <span class="attr">em:</span> <span class="string">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">escape:</span> <span class="string">/^\\([`*\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line"><span class="attr">em:</span> <span class="string">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br></pre></td></tr></table></figure>
<h1 id="GitHub-Pages部署"><a href="#GitHub-Pages部署" class="headerlink" title="GitHub Pages部署"></a>GitHub Pages部署</h1><p><code>\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://用户名.github.io</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:用户名/用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<h1 id="定制化"><a href="#定制化" class="headerlink" title="定制化"></a>定制化</h1><p>为了方便发布到 Hexo 的文章部署到 GitHub Pages，编写 bat 脚本如下：</p>
<p><code>部署到Github.bat</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@cd /d &quot;D:\Tusizou&#x27;s Blog&quot;</span><br><span class="line">cmd /k &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&quot;</span><br></pre></td></tr></table></figure>
<p>为了区分本地文章，仅将必要的文章发布到 Hexo，并且本地文章不具备 Front-matter，使用 python 对文本进行处理使得发布到 Hexo 的文章具备 Front-matter，同时将附件文件夹也一并拷贝到 Hexo 中。</p>
<p><code>发布到Hexo.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">path = sys.argv[<span class="number">1</span>]</span><br><span class="line">targetpath = <span class="string">r&#x27;&#x27;&#x27;D:\Tusizou&#x27;s Blog\source\_posts&#x27;&#x27;&#x27;</span> + <span class="string">&quot;\\&quot;</span></span><br><span class="line">postpath = targetpath + os.path.basename(path)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> rawfile:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(postpath, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> newfile:</span><br><span class="line">        str1 = <span class="string">r&#x27;&#x27;&#x27;---</span></span><br><span class="line"><span class="string">title: &#x27;&#x27;&#x27;</span></span><br><span class="line">        str2 = Path(path).stem</span><br><span class="line">        str3 = <span class="string">r&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">categories: &#x27;&#x27;&#x27;</span></span><br><span class="line">        str4 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mathjax: &#x27;&#x27;&#x27;</span></span><br><span class="line">        str5=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&amp;emsp;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!--more--&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">str</span> = str1+str2+str3+sys.argv[<span class="number">2</span>]+str4+sys.argv[<span class="number">3</span>]+str5</span><br><span class="line">        newfile.write(<span class="built_in">str</span>+rawfile.read())</span><br><span class="line"></span><br><span class="line">image_path = os.path.dirname(path)+<span class="string">&#x27;\\&#x27;</span>+Path(path).stem</span><br><span class="line"><span class="keyword">if</span> os.path.exists(image_path):</span><br><span class="line">    source_path = os.path.abspath(image_path)</span><br><span class="line">    target_path = os.path.abspath(<span class="string">r&#x27;&#x27;&#x27;D:\Tusizou&#x27;s Blog\source\_posts\\&#x27;&#x27;&#x27;</span>+Path(path).stem)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(target_path):</span><br><span class="line">        <span class="comment"># 如果目标路径存在原文件夹的话就先删除</span></span><br><span class="line">        shutil.rmtree(target_path)</span><br><span class="line"></span><br><span class="line">    shutil.copytree(source_path, target_path)</span><br></pre></td></tr></table></figure>
<p>修改注册表将发布到 Hexo 的功能添加到鼠标右键文件的右键菜单中，同时编写 bat 脚本调用 python 程序发布</p>
<p><code>发布到Hexo.bat</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd /d %~dp0</span><br><span class="line">echo 输入类别</span><br><span class="line">set /p type=</span><br><span class="line">echo 是否支持数学公式(默认为true)</span><br><span class="line">set /p mathjax=</span><br><span class="line">if &quot;%mathjax%&quot;==&quot;&quot; set mathjax=true</span><br><span class="line">set file=&quot;%1&quot;</span><br><span class="line">echo 发布成功</span><br><span class="line">cmd /c python 发布到Hexo.py %1 %type% %mathjax%</span><br></pre></td></tr></table></figure>
<p>修改注册表：win+R 输入regedit，进入路径 <code>计算机\HKEY_CLASSES_ROOT\*\shell</code>，新建项并命名为 <code>Post</code>，双击 <code>默认</code>项，添加数值数据 <code>发布到Hexo</code>，该名称为右键文件时的右键菜单中显示的名字；在 <code>Post</code> 下再次新建项 <code>command</code>，双击 <code>默认</code>项，添加数值数据为 <code>发布到Hexo.bat</code> 文件所在路径，并加上 <code>”%1&quot;</code>，最终结果为：<code>&quot;发布到Hexo.bat&quot; &quot;%1&quot;</code>。</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>6.关系模式分解的方法</title>
    <url>/2022/07/03/6.%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F%E5%88%86%E8%A7%A3%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>&emsp;</p>
<span id="more"></span>
<h1 id="一、保持函数依赖的-3NF-分解"><a href="#一、保持函数依赖的-3NF-分解" class="headerlink" title="一、保持函数依赖的 3NF 分解"></a>一、保持函数依赖的 3NF 分解</h1><p>对于给定的关系模式 𝘙&lt;𝘜，𝘍&gt;，将其转化为 3NF 保持函数依赖的分解算法如下：</p>
<p>（1）对 𝘙&lt;𝘜，𝘍&gt; 中的 𝘍 进行极小化处理，将极小化处理后的函数依赖集仍记为 𝘍。</p>
<p>（2）找出不在 𝘍 中出现的属性，把这样的属性构成一个关系模式，并把这些属性从 𝘜 中去掉。</p>
<p>（3）如果 𝘍 中有一个函数依赖涉及 𝘙 的全部属性，则 𝘙 不能再分解。</p>
<p>（4）如果 𝘍 中含有 𝘟 $\to$ 𝘈，则分解应包含模式 𝘟𝘈；如果 𝘟 $\to$ 𝘈$_1$，𝘟 $\to$ 𝘈$_2$，$\cdots$，𝘟 $\to$ 𝘈$_n$ 均属于 𝘍，则分解应包含模式 𝘟𝘈$_1$𝘈$_2\cdots$𝘈$_n$。</p>
<p><strong>例题</strong>：设关系模式 𝘙&lt;𝘜，𝘍&gt;，𝘜＝｛𝘊，𝘛，𝘏，𝘙，𝘚，𝘎，𝘟，𝘠，𝘡｝，𝘍＝｛𝘊 $\to$ 𝘛，𝘊𝘚 $\to$ 𝘎，𝘏𝘙 $\to$ 𝘊，𝘏𝘚 $\to$ 𝘙，𝘛𝘏 $\to$ 𝘙，𝘊 $\to$ 𝘟｝，将 𝘙 分解为 3NF，且保持函数依赖。</p>
<p>解：由于该函数依赖集已经是最小化的，则分解 $\rho$ 为</p>
<script type="math/tex; mode=display">
\rho =\{\mathrm{CTX},\mathrm{CSG},\mathrm{HRC},\mathrm{HSR},\mathrm{THR},\mathrm{YZ}\}</script><h1 id="二、保持无损连接性和依赖保持性的-3NF-分解"><a href="#二、保持无损连接性和依赖保持性的-3NF-分解" class="headerlink" title="二、保持无损连接性和依赖保持性的 3NF 分解"></a>二、保持无损连接性和依赖保持性的 3NF 分解</h1><p>对于给定的关系模式 𝘙&lt;𝘜，𝘍&gt;，将其转化为 3NF 保持无损连接性和依赖保持性的分解算法如下：</p>
<p>（1）设 𝘟 是 𝘙&lt;𝘜，𝘍&gt; 的码，𝘙&lt;𝘜，𝘍&gt; 已分解为 $\rho$＝｛𝘙$_1$&lt;𝘜$_1$，𝘍$_1$&gt;，𝘙$_2$&lt;𝘜$_2$，𝘍$_2$&gt;，$\cdots$，𝘙$_n$&lt;𝘜$_n$，𝘍$_n$&gt;｝，令 $\tau$＝$\rho$ $\cup$ ｛𝘙$^*$&lt;𝘟，𝘍$_x$&gt;｝，其中 𝘍$_x$ 是函数依赖在码上的投影。</p>
<p>（2）若有某个 𝘜$_i$，𝘟 $\subseteq$ 𝘜$_i$，则将 𝘙$^*$&lt;𝘟，𝘍$_x$&gt; 从 $\tau$ 中去掉，$\tau$ 就是所求的分解。</p>
<p><strong>例题</strong>：设关系模式 𝘙&lt;&gt;𝘜，𝘍&gt;，𝘜＝｛𝘊，𝘛，𝘏，𝘙，𝘚，𝘎｝，𝘍＝｛𝘊 $\to$ 𝘛，𝘊𝘚 $\to$ 𝘎，𝘏𝘙 $\to$ 𝘊，𝘏𝘚 $\to$ 𝘙，𝘏𝘛 $\to$ 𝘙｝，将 𝘙 分解为 3NF，且既保持无损连接性又保持依赖保持性。</p>
<p>解：求得关系模式 𝘙 的码为 𝘏𝘚，它的一个保持函数依赖的 3NF 为</p>
<script type="math/tex; mode=display">
\rho =\{\mathrm{CT},\mathrm{CSG},\mathrm{HRC},\mathrm{HSR},\mathrm{THR}\}</script><p>因为 𝘏𝘚 $\subseteq$ 𝘏𝘚𝘙，所以 $\tau$＝$\rho$＝｛𝘊𝘛，𝘊𝘚𝘎，𝘏𝘙𝘊，𝘏𝘚𝘙，𝘛𝘏𝘙｝也是保持无损连接性的分解。</p>
<h1 id="三、保持无损连接性的-BCNF-分解"><a href="#三、保持无损连接性的-BCNF-分解" class="headerlink" title="三、保持无损连接性的 BCNF 分解"></a>三、保持无损连接性的 BCNF 分解</h1><p>对于给定的关系模式 𝘙&lt;𝘜，𝘍&gt;，将其转化为 BCND 保持无损连接性的分解算法如下：</p>
<p>（1）令 $\rho$＝𝘙&lt;𝘜，𝘍&gt;。</p>
<p>（2）检查 $\rho$ 中各关系模式是否均属于 BCNF，若是，则算法终止。</p>
<p>（3）假设 $\rho$ 中 𝘙$_i$&lt;𝘜$_i$，𝘍$_i$&gt; 不属于 BCNF，那么必定有 𝘟 $\to$ 𝘈 $\in$ 𝘍$_i^+$（𝘈 $\notin$ 𝘟），且 𝘟 不是 𝘙$_i$ 的码，因此，𝘟𝘈 是 𝘜$_i$ 的真子集。对 𝘙$_i$ 进行分解，得 $\sigma$＝｛𝘚$_1$，𝘚$_2$｝，𝘜$_{S_1}$＝𝘟𝘈，𝘜$_{S_2}$＝𝘜$_i$ $-$｛𝘈｝，以 $\sigma$ 代替 𝘙$_i$&lt;𝘜$_i$，𝘍$_i$&gt;，返回第（2）步。</p>
<p><strong>例题1</strong>：设关系模式 𝘙&lt;𝘜，𝘍&gt;，𝘜＝｛𝘊，𝘛，𝘏，𝘙，𝘚，𝘎｝，𝘍＝｛𝘊 $\to$ 𝘛，𝘊𝘚 $\to$ 𝘎，𝘏𝘙 $\to$ 𝘊，𝘏𝘚 $\to$ 𝘙，𝘏𝘛 $\to$ 𝘙｝，试把 𝘙 分解成具有无损连接的 BCNF。</p>
<p>解：令 $\rho$＝｛𝘊𝘛𝘏𝘙𝘚𝘎｝。</p>
<p>① 关系模式 𝘙&lt;𝘜，𝘍&gt; 的码为 𝘏𝘚，选择 𝘊𝘚 $\to$ 𝘎 分解，得出：$\rho$＝｛𝘚$_1$，𝘚$_2$｝，其中，𝘚$_1$＝𝘊𝘚𝘎，𝘚$_2$＝𝘊𝘛𝘏𝘙𝘚，$\pi_{S_1}(F)$＝｛𝘊𝘚 $\to$ 𝘎｝，$\pi_{S_2}(F)$＝｛𝘊 $\to$ 𝘛，𝘏𝘙 $\to$ 𝘊，𝘏𝘚 $\to$ 𝘙，𝘏𝘛 $\to$ 𝘙｝。显然，𝘙&lt;𝘚$_2$，$\pi_{S_2}(F)$&gt;  不服从 BCNF，需要继续分解。</p>
<p>② 关系模式 𝘙&lt;𝘚$_2$，$\pi_{S_2}(F)$&gt; 的码为 𝘏𝘚，选择 𝘊 $\to$ 𝘛 分解，得出：$\rho$＝｛𝘚$_1$，𝘚$_3$，𝘚$_4$｝，其中，𝘚$_3$＝𝘊𝘛，𝘚$_4$＝𝘊𝘏𝘙𝘚，$\pi_{S_3}(F)$＝｛𝘊 $\to$ 𝘛｝，$\pi_{S_4}(F)$＝｛𝘏𝘙 $\to$ 𝘊，𝘏𝘚 $\to$ 𝘙，𝘏𝘊 $\to$ 𝘙｝，注意函数依赖 𝘏𝘛 $\to$ 𝘙 变更为 𝘏𝘊 $\to$ 𝘙。显然，𝘙&lt;𝘚$_4$，$\pi_{S_4}(F)$&gt; 不服从 BCND，需要继续分解。</p>
<p>③ 关系模式 𝘙&lt;𝘚$_4$，$\pi_{S_4}(F)$&gt; 的码为 𝘏𝘚，选择 𝘏𝘊 $\to$ 𝘙 分解，得出：$\rho$＝｛𝘚$_1$，𝘚$_3$，𝘚$_5$，𝘚$_6$｝，其中，𝘚$_5$＝𝘏𝘊𝘙，𝘚$_6$＝𝘊𝘏𝘚，$\pi_{S_5}(F)$＝｛𝘏𝘊 $\to$ 𝘙｝，$\pi_{S_6}(F)$＝$\varnothing$。此时关系模式已经满足 BCNF。</p>
<p>④ 最后的分解为 $\rho$＝｛𝘊𝘚𝘎，𝘊𝘛，𝘊𝘏𝘙，𝘊𝘏𝘚｝。</p>
<p><strong>例题2</strong>：设关系模式 𝘙&lt;𝘜，𝘍&gt;，𝘜＝｛学号，课程号，成绩，教师名，教师所在系｝，𝘍＝｛（学号，课程号）$\to$ 成绩，课程号 $\to$ 教师名，教师名 $\to$ 教师所在系｝，将其分解为具有无损链接的 BCNF。</p>
<p>解：令 $\rho$＝｛学号，课程号，成绩，教师名，教师所在系｝</p>
<p>① 关系模式 𝘙 的码为（学号，课程号），选择“教师名 $\to$ 教师所在系”进行分解，得出：$\rho$＝｛𝘙$_1$，𝘙$_2$｝，其中，𝘙$_1$＝｛教师名，教师所在系｝，𝘍$_1$＝｛教师名 $\to$ 教师所在系｝，𝘙$_2$＝｛学号，课程号，成绩，教师名｝，𝘍$_2$＝｛（学号，课程号）$\to$ 成绩，课程号 $\to$ 教师名｝。显然，需要对 𝘙$_2$ 进行分解。</p>
<p>② 关系模式 𝘙$_2$ 的码为（学号，课程号），选择“课程号 $\to$ 教师名”进行分解，得出：$\rho$＝｛𝘙$_1$，𝘙$_3$，𝘙$_4$｝，其中，𝘙$_3$＝｛课程号，教师名｝，𝘍$_3$＝｛课程号 $\to$ 教师名｝，𝘙$_4$＝｛学号，课程号，成绩｝，𝘍$_4$＝｛（学号，课程号）$\to$ 成绩｝。此时关系模式 𝘙$_3$ 和 𝘙$_4$ 均属于 BCNF。</p>
<p>③ 最后的分解为：$\rho$＝｛（教师名，教师所在系），（课程号，教师名），（学号，课程号，成绩）｝。</p>
<h1 id="四、关系模式分解的重要结论"><a href="#四、关系模式分解的重要结论" class="headerlink" title="四、关系模式分解的重要结论"></a>四、关系模式分解的重要结论</h1><ul>
<li>若要求分解保持函数依赖，则模式分解总可以达到 3NF，但不一定达到 BCNF。</li>
<li>若要求分解具有无损连接性，则分解一定可以达到 BCNF。</li>
<li>若要求分解既保持函数依赖，又具有无损连接性，那么模式分解一定可以达到 3NF，但不一定达到 BCNF。</li>
</ul>
]]></content>
      <categories>
        <category>关系模式</category>
      </categories>
  </entry>
  <entry>
    <title>重载递增运算符</title>
    <url>/2022/07/11/%E9%87%8D%E8%BD%BD%E9%80%92%E5%A2%9E%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p>&emsp;</p>
<span id="more"></span>
<p>在运行时，当你的代码对对象执行前置操作（前置递增或前置递减）时，会发生以下行为：</p>
<ul>
<li>在对象上执行递增或递减代码；</li>
<li>返回对象。</li>
</ul>
<p>在运行时，当你的代码对对象执行后置操作（后置递增或后置递减）时，会发生以下行为：</p>
<ul>
<li>如果对象是值类型，则系统会复制该对象；如果对象是引用类型，则引用会被复制；</li>
<li>在对象上执行递增或递减代码；</li>
<li>返回保存的操作数。</li>
</ul>
<p>如果操作数对象是值类型对象，那么一点问题都没有，但是当用户定义类型是引用类型时，就要小心了。对于引用类型的对象，前置操作没有问题，因为没有进行复制。但是，对于后置操作，因为保存的副本是引用的副本，所以这意味着原始引用和引用副本指向相同的对象，那么，当进行第二步操作的时候，递增或递减代码就会在对象上执行，这意味着保存的引用所指向的对象不再是它的起始状态了，返回对变化了的对象的引用可能不是所预期的行为。</p>
<div class="pdfobject-container" data-target="Overload" data-height="the"></div>]]></content>
      <categories>
        <category>c#</category>
      </categories>
  </entry>
</search>
